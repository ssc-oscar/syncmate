name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.24.x]

    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y fuse libfuse-dev

      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run vet
        run: go vet ./...

      - name: Run tests
        run: go test -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.out

  build:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            cc: gcc
            cgo: 1
          - goos: linux
            goarch: arm64
            cc: aarch64-linux-gnu-gcc
            cgo: 1

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24.x

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y fuse3 libfuse3-dev
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: ${{ matrix.cgo }}
          CC: ${{ matrix.cc }}
        run: |
          COMMIT_HASH_SHORT=$(echo "${{ github.sha }}" | cut -c1-7)
          BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          BINARY_NAME="syncmate-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi

          go build -tags=fuse3 -v -ldflags="-s -w \
            -X 'main.BUILD_TIME=${BUILD_TIME}' \
            -X 'main.COMMIT_HASH=${COMMIT_HASH_SHORT}'" \
            -o "${BINARY_NAME}" .

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: syncmate-${{ matrix.goos }}-${{ matrix.goarch }}
          path: syncmate-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }}

  # lint:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Set up Go
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version: 1.24.x

  #     - name: Install dependencies
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y fuse libfuse-dev

  #     - name: golangci-lint
  #       uses: golangci/golangci-lint-action@v4
  #       with:
  #         version: latest
  #         args: --timeout=5m
